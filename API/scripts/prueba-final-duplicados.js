import prisma from '../src/lib/db.js';

async function pruebaFinalDuplicados() {
  try {
    console.log('üß™ PRUEBA FINAL: ELIMINACI√ìN + 2 SINCRONIZACIONES\n');
    
    // PASO 1: ELIMINAR TODOS LOS EXAMENES
    console.log('üóëÔ∏è  PASO 1: Eliminando todos los ex√°menes y datos TOTEM...');
    
    // Eliminar en orden correcto (FK constraints)
    await prisma.examenTotem.deleteMany({});
    await prisma.examen.deleteMany({});
    await prisma.totemData.deleteMany({});
    
    console.log('   ‚úÖ Todos los ex√°menes eliminados');
    
    // Verificar que est√° vac√≠o
    const examenesDespuesEliminacion = await prisma.examen.count();
    const examenesTotemDespuesEliminacion = await prisma.examenTotem.count();
    console.log(`   üìä Ex√°menes: ${examenesDespuesEliminacion}, ExamenesTotem: ${examenesTotemDespuesEliminacion}`);
    
    if (examenesDespuesEliminacion > 0 || examenesTotemDespuesEliminacion > 0) {
      throw new Error('ERROR: No se eliminaron todos los datos');
    }
    
    // PASO 2: PRIMERA SINCRONIZACI√ìN
    console.log('\nüîÑ PASO 2: Primera sincronizaci√≥n...');
    
    const response1 = await fetch('http://localhost:3000/api/v1/totem/sync', {
      method: 'POST'
    });
    const result1 = await response1.json();
    
    console.log(`   üìä Primera sync: ${result1.data?.examensCreated || 0} ex√°menes creados`);
    
    const examenesDespuesPrimera = await prisma.examen.count();
    const examenesTotemDespuesPrimera = await prisma.examenTotem.count();
    console.log(`   üìä Estado: ${examenesDespuesPrimera} ex√°menes, ${examenesTotemDespuesPrimera} ExamenesTotem`);
    
    // PASO 3: SEGUNDA SINCRONIZACI√ìN (LA CR√çTICA)
    console.log('\nüîÑ PASO 3: Segunda sincronizaci√≥n (prueba de duplicados)...');
    
    const response2 = await fetch('http://localhost:3000/api/v1/totem/sync', {
      method: 'POST'
    });
    const result2 = await response2.json();
    
    console.log(`   üìä Segunda sync: ${result2.data?.examensCreated || 0} ex√°menes creados`);
    
    const examenesDespuesSegunda = await prisma.examen.count();
    const examenesTotemDespuesSegunda = await prisma.examenTotem.count();
    console.log(`   üìä Estado: ${examenesDespuesSegunda} ex√°menes, ${examenesTotemDespuesSegunda} ExamenesTotem`);
    
    // PASO 4: AN√ÅLISIS DE RESULTADOS
    console.log('\nüìã PASO 4: An√°lisis de resultados...');
    
    const diferencia = examenesDespuesSegunda - examenesDespuesPrimera;
    console.log(`   üìä Diferencia entre sincronizaciones: ${diferencia} ex√°menes`);
    
    // Verificar duplicados
    const duplicados = await prisma.$queryRaw`
      SELECT COUNT(*) as total
      FROM (
        SELECT 
          et.sector_totem, 
          et.carrera_totem, 
          et.materia_totem,
          DATE(e.fecha) as fecha_examen,
          COUNT(*) as cantidad
        FROM examenes_totem et
        JOIN examenes e ON et.examen_id = e.id
        GROUP BY et.sector_totem, et.carrera_totem, et.materia_totem, DATE(e.fecha)
        HAVING COUNT(*) > 1
      ) duplicados
    `;
    
    const totalDuplicados = duplicados[0].total;
    console.log(`   üîç Grupos duplicados encontrados: ${totalDuplicados}`);
    
    // PASO 5: CONCLUSI√ìN
    console.log('\nüéØ PASO 5: CONCLUSI√ìN FINAL...');
    
    if (diferencia === 0 && totalDuplicados === 0) {
      console.log('‚úÖ ¬°√âXITO TOTAL! Sistema de prevenci√≥n de duplicados funcionando PERFECTAMENTE');
      console.log('‚úÖ Segunda sincronizaci√≥n no cre√≥ nuevos ex√°menes');
      console.log('‚úÖ No hay duplicados en el sistema');
      console.log('‚úÖ LISTO para sincronizaci√≥n autom√°tica diaria');
    } else if (diferencia > 0) {
      console.log('‚ùå PROBLEMA: Se crearon nuevos ex√°menes en la segunda sincronizaci√≥n');
      console.log('‚ùå El sistema de prevenci√≥n de duplicados NO est√° funcionando');
      console.log(`‚ùå Se crearon ${diferencia} ex√°menes adicionales`);
    } else if (totalDuplicados > 0) {
      console.log('‚ùå PROBLEMA: Se detectaron duplicados en el sistema');
      console.log(`‚ùå ${totalDuplicados} grupos de duplicados encontrados`);
    }
    
    console.log(`\nüìä RESUMEN FINAL:`);
    console.log(`   Primera sincronizaci√≥n: ${examenesDespuesPrimera} ex√°menes`);
    console.log(`   Segunda sincronizaci√≥n: ${examenesDespuesSegunda} ex√°menes`);
    console.log(`   Diferencia: ${diferencia} ex√°menes`);
    console.log(`   Duplicados: ${totalDuplicados} grupos`);
    
  } catch (error) {
    console.error('üí• Error en la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

pruebaFinalDuplicados(); 