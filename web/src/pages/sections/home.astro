---
import ExamModal from '../../components/ExamModal.astro';
---
<!-- SECCI√ìN 2: Aplicaci√≥n Principal -->
<div id="appSection" class="h-screen relative overflow-hidden">
    <!-- Imagen de fondo para la consulta -->
    <div
        class="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style="background-image: url('./images/fondo.jpg')"
    ></div>
    
    <!-- Overlay con degradado horizontal y blur -->
    <div 
        id="appOverlay" 
        class="absolute inset-0 opacity-100 transition-all duration-1000 backdrop-blur-sm"
        style="background: linear-gradient(to right, #004180cc, #c7181fcc)"
    ></div>
    
    <!-- Capa adicional para oscurecer -->
    <div 
        id="appDarkLayer"
        class="absolute inset-0 bg-black/40 opacity-100 transition-opacity duration-1000"
    ></div>

    <!-- Contenido de la aplicaci√≥n -->
    <div class="relative z-10 h-full flex flex-col items-center justify-center px-6 gap-12 pb-24" id="appContent">
        
        <!-- Logo centrado -->
        <div class="animate-fade-in">
            <img
                src="./logos/ucasalx_logo.png"
                alt="UCASAL Logo"
                class="h-24 md:h-40 lg:h-48"
            />
        </div>

        <!-- Contenido centrado (t√≠tulo y formulario) -->
        <div class="flex flex-col items-center gap-8 animate-fade-in w-full">
            <!-- T√≠tulo -->
            <h1 class="text-white text-2xl md:text-3xl lg:text-5xl font-semibold text-center animate-slide-down">
                Consulta donde rendis tu examen
            </h1>
            
            <!-- Formulario -->
            <form id="examForm" class="w-full max-w-lg animate-slide-up" onsubmit="return false;">
                <div class="flex gap-4">
                    <!-- Input DNI -->
                    <input
                        id="dniInput"
                        type="text"
                        placeholder="Ingresa tu DNI"
                        class="flex-1 px-6 py-4 text-lg rounded-lg text-white placeholder-gray-200 border-2 border-white bg-white/10 backdrop-blur-sm focus:outline-none focus:ring-2 focus:ring-white/50 focus:bg-white/20 text-center transition-all duration-300 hover:bg-white/15"
                        maxlength="8"
                        pattern="[0-9]{7,8}"
                        required
                    />
                    
                    <!-- Bot√≥n Ir -->
                    <button
                        id="searchBtn"
                        type="submit"
                        class="px-8 py-4 text-lg bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-red-500/50 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <span id="searchBtnText">‚Üí</span>
                        <span id="searchBtnLoader" class="hidden">
                            <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                </div>
                
                <!-- Mensaje de error -->
                <div id="errorMessage" class="hidden mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                    <p class="text-sm">Por favor, ingresa un DNI v√°lido (7-8 d√≠gitos).</p>
                </div>
                
                <!-- Mensaje de "no encontrado" -->
                <div id="notFoundMessage" class="hidden mt-4 p-4 bg-blue-50 border border-blue-200 text-blue-800 rounded-lg">
                    <div class="flex items-start space-x-3">
                        <!-- √çcono de informaci√≥n -->
                        <div class="flex-shrink-0">
                            <svg class="w-5 h-5 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <!-- Contenido del mensaje -->
                        <div class="flex-1">
                            <h4 class="text-sm font-semibold text-blue-800 mb-2">‚ÑπÔ∏è Informaci√≥n sobre tu consulta</h4>
                                                         <div class="text-sm space-y-1">
                                 <p><strong>‚Ä¢</strong> Este DNI no registra inscripciones a ex√°menes en las pr√≥ximas 48 horas.</p>
                                 <p><strong>‚Ä¢</strong> Si te inscribiste a un examen pero no aparece en qu√© aula rend√≠s, <strong>consult√° en sede</strong>.</p>
                             </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- üî• BOT√ìN PANTALLA COMPLETA para tablet -->
<button 
    id="fullscreenBtn"
    class="fixed top-4 right-4 z-50 bg-white/20 backdrop-blur-md text-white p-3 rounded-full shadow-lg hover:bg-white/30 hover:scale-110 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-white/50 active:scale-95"
    title="Pantalla completa"
>
    <!-- Icono de pantalla completa -->
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
    </svg>
</button>

<!-- Incluir el componente del modal -->
<ExamModal />

<style>
  /* Animaciones */
  @keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-fade-in {
    animation: fade-in 1s ease-out;
  }
  
  @keyframes slide-down {
    from { opacity: 0; transform: translateY(-30px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-slide-down {
    animation: slide-down 1s ease-out 0.5s both;
  }
  
  @keyframes slide-up {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-slide-up {
    animation: slide-up 1s ease-out 1s both;
  }
</style>

<script>
    // üî• FUNCI√ìN PARA MOSTRAR NOTIFICACIONES DE PANTALLA COMPLETA
    function showFullscreenNotification(message: string) {
        // Crear notificaci√≥n temporal
        const notification = document.createElement('div');
        notification.className = 'fixed top-20 right-4 bg-black/80 text-white px-4 py-2 rounded-lg shadow-lg z-50 text-sm backdrop-blur-md';
        notification.textContent = message;
        notification.style.transition = 'all 0.3s ease';
        
        document.body.appendChild(notification);
        
        // Remover despu√©s de 3 segundos
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    // üî• FUNCI√ìN PANTALLA COMPLETA para tablet Samsung S7
    function toggleFullscreen() {
        const doc = document as any;
        const elem = document.documentElement as any;
        
        try {
            if (!doc.fullscreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
                // Entrar a pantalla completa
                if (elem.requestFullscreen) {
                    elem.requestFullscreen();
                } else if (elem.webkitRequestFullscreen) { // Safari
                    elem.webkitRequestFullscreen();
                } else if (elem.msRequestFullscreen) { // IE11
                    elem.msRequestFullscreen();
                } else if (elem.webkitRequestFullScreen) { // Android Chrome
                    elem.webkitRequestFullScreen();
                }
                console.log('üñ•Ô∏è Entrando a pantalla completa...');
                // Mostrar notificaci√≥n temporal
                showFullscreenNotification('Modo pantalla completa activado. Presiona F11 o el bot√≥n para salir.');
            } else {
                // Salir de pantalla completa
                if (doc.exitFullscreen) {
                    doc.exitFullscreen();
                } else if (doc.webkitExitFullscreen) { // Safari
                    doc.webkitExitFullscreen();
                } else if (doc.msExitFullscreen) { // IE11
                    doc.msExitFullscreen();
                } else if (doc.webkitCancelFullScreen) { // Android Chrome
                    doc.webkitCancelFullScreen();
                }
                console.log('üì± Saliendo de pantalla completa...');
                // Mostrar notificaci√≥n temporal
                showFullscreenNotification('Modo pantalla completa desactivado.');
            }
        } catch (error) {
            console.error('Error al cambiar pantalla completa:', error);
            alert('Tu navegador no soporta pantalla completa o la funci√≥n est√° bloqueada.');
        }
    }

    // üéØ Listener para cambios de pantalla completa (actualizar √≠cono)
    function updateFullscreenButton() {
        const btn = document.getElementById('fullscreenBtn');
        const doc = document as any;
        const isFullscreen = !!(doc.fullscreenElement || doc.webkitFullscreenElement || doc.msFullscreenElement || doc.webkitIsFullScreen);
        
        if (btn) {
            btn.title = isFullscreen ? 'Salir de pantalla completa (F11)' : 'Pantalla completa (F11)';
            // Opcional: cambiar el √≠cono seg√∫n el estado
            const svg = btn.querySelector('svg');
            if (svg && isFullscreen) {
                svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>`;
            } else if (svg) {
                svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>`;
            }
        }
    }

    // Hacer funci√≥n global
    (window as any).toggleFullscreen = toggleFullscreen;

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('examForm') as HTMLFormElement;
        const dniInput = document.getElementById('dniInput') as HTMLInputElement;
        const searchBtn = document.getElementById('searchBtn') as HTMLButtonElement;
        const searchBtnText = document.getElementById('searchBtnText');
        const searchBtnLoader = document.getElementById('searchBtnLoader');
        const errorMessage = document.getElementById('errorMessage');
        const notFoundMessage = document.getElementById('notFoundMessage');
        
        // üî• Configurar bot√≥n de pantalla completa
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        fullscreenBtn?.addEventListener('click', toggleFullscreen);
        
        // üéØ Listeners para cambios de pantalla completa
        document.addEventListener('fullscreenchange', updateFullscreenButton);
        document.addEventListener('webkitfullscreenchange', updateFullscreenButton);
        document.addEventListener('msfullscreenchange', updateFullscreenButton);
        document.addEventListener('mozfullscreenchange', updateFullscreenButton); // Firefox
        
        // üî• Soporte para tecla F11
        document.addEventListener('keydown', function(e) {
            if (e.key === 'F11') {
                e.preventDefault(); // Evitar comportamiento por defecto del navegador
                toggleFullscreen();
            }
        });
        
        // Funci√≥n para mostrar el estado de carga
        function showLoading() {
            if (searchBtn) searchBtn.disabled = true;
            searchBtnText?.classList.add('hidden');
            searchBtnLoader?.classList.remove('hidden');
        }
        
        // Funci√≥n para ocultar el estado de carga
        function hideLoading() {
            if (searchBtn) searchBtn.disabled = false;
            searchBtnText?.classList.remove('hidden');
            searchBtnLoader?.classList.add('hidden');
        }
        
        // Funci√≥n para mostrar mensaje de error
        function showError() {
            errorMessage?.classList.remove('hidden');
            notFoundMessage?.classList.add('hidden');
        }
        
        // Funci√≥n para mostrar mensaje de "no encontrado"
        function showNotFound() {
            notFoundMessage?.classList.remove('hidden');
            errorMessage?.classList.add('hidden');
        }
        
        // Funci√≥n para ocultar mensajes
        function hideMessages() {
            errorMessage?.classList.add('hidden');
            notFoundMessage?.classList.add('hidden');
        }
        
        // Validaci√≥n del DNI
        function validateDNI(dni: string): boolean {
            const dniRegex = /^[0-9]{7,8}$/;
            const isValid = dniRegex.test(dni) && dni.length >= 7 && dni.length <= 8;
            console.log(`Validando DNI: "${dni}" - V√°lido: ${isValid}`);
            return isValid;
        }
        
        // B√∫squeda real de ex√°menes usando la API
        async function searchExam(dni: string): Promise<{found: boolean; examData?: any}> {
            try {
                console.log('Consultando ex√°menes para DNI:', dni);
                
                // Llamar a nuestro endpoint
                const response = await fetch(`https://totem-api-production.up.railway.app/api/v1/estudiantes/examenes/${dni}`);
                
                if (!response.ok) {
                    if (response.status === 404) {
                        return { found: false };
                    }
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const apiResult = await response.json();
                
                if (!apiResult.success || !apiResult.data.examenes || apiResult.data.examenes.length === 0) {
                    return { found: false };
                }
                
                // Transformar datos de la API al formato esperado por el modal
                const examData = {
                    dni: apiResult.data.estudiante.dni,
                    estudiante: {
                        nombre: apiResult.data.estudiante.nombre,
                        carrera: apiResult.data.examenes[0]?.carrera?.nombre || 'No especificada',
                        lugar: apiResult.data.estudiante.lugar,
                        sector: apiResult.data.estudiante.sector
                    },
                    examenes: apiResult.data.examenes.map((examen: any) => ({
                        materia: examen.materia?.nombre || examen.materia?.nombreCorto || 'Materia no especificada',
                        fecha: formatearFecha(examen.fecha || examen.fechaExterna),
                        hora: examen.hora || 'Hora no especificada',
                        aula: examen.aula?.nombre || 'Sin asignar',
                        ubicacion: examen.aula?.ubicacion || '',
                        tipo: examen.tipoExamen || 'No especificado',
                        modalidad: examen.modalidad || 'presencial',
                        profesor: examen.docente || 'No especificado',
                        observaciones: examen.observaciones || '',
                        materialPermitido: examen.materialPermitido || '',
                        requierePc: examen.requierePc || false,
                        carrera: examen.carrera?.nombre || 'No especificada',
                        facultad: examen.carrera?.facultad || 'No especificada'
                    }))
                };
                
                console.log('Ex√°menes procesados:', examData);
                
                return {
                    found: true,
                    examData: examData
                };
                
            } catch (error) {
                console.error('Error al consultar API:', error);
                throw error;
            }
        }
        
        // Funci√≥n auxiliar para formatear fechas (CORREGIDO: usar UTC para evitar problemas de zona horaria)
        function formatearFecha(fecha: string | null): string {
            if (!fecha) return 'Fecha no especificada';
            
            try {
                // Usar UTC para evitar problemas de zona horaria
                const fechaObj = new Date(fecha + 'T00:00:00.000Z');
                const hoy = new Date();
                const hoyUTC = new Date(hoy.getFullYear(), hoy.getMonth(), hoy.getDate());
                const manana = new Date(hoyUTC);
                manana.setDate(hoyUTC.getDate() + 1);
                
                const fechaStr = fechaObj.toISOString().split('T')[0];
                const hoyStr = hoyUTC.toISOString().split('T')[0];
                const mananaStr = manana.toISOString().split('T')[0];
                
                if (fechaStr === hoyStr) {
                    return `Hoy - ${fechaObj.getUTCDate()} ${obtenerNombreMes(fechaObj.getUTCMonth())}`;
                } else if (fechaStr === mananaStr) {
                    return `Ma√±ana - ${fechaObj.getUTCDate()} ${obtenerNombreMes(fechaObj.getUTCMonth())}`;
                } else {
                    return `${fechaObj.getUTCDate()} ${obtenerNombreMes(fechaObj.getUTCMonth())} ${fechaObj.getUTCFullYear()}`;
                }
            } catch (error) {
                return fecha;
            }
        }
        
        // Funci√≥n auxiliar para obtener nombre del mes
        function obtenerNombreMes(mes: number): string {
            const meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 
                          'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
            return meses[mes] || '';
        }
        
        // Event listener para el input DNI (solo n√∫meros)
        dniInput?.addEventListener('input', function(e) {
            // Permitir solo n√∫meros
            const target = e.target as HTMLInputElement;
            if (target) {
                target.value = target.value.replace(/[^0-9]/g, '');
            }
            hideMessages();
        });
        
        // Event listener para el formulario
        form?.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const dni = dniInput?.value.trim() || '';
            console.log('DNI ingresado:', dni, 'Longitud:', dni.length);
            
            if (!dni) {
                console.log('DNI vac√≠o');
                showError();
                return;
            }
            
            if (!validateDNI(dni)) {
                console.log('DNI no v√°lido seg√∫n regex:', dni);
                showError();
                return;
            }
            
            console.log('DNI v√°lido, iniciando b√∫squeda...');
            hideMessages();
            showLoading();
            
            try {
                const result = await searchExam(dni);
                
                if (result.found) {
                    console.log('Examen encontrado! Abriendo modal...');
                    
                    // Usar el componente ExamModal
                    const ExamModal = (window as any).ExamModal;
                    if (ExamModal) {
                        ExamModal.setCurrentExamData(result.examData);
                        ExamModal.openExamModal();
                    }
                } else {
                    showNotFound();
                }
            } catch (error) {
                console.error('Error al buscar examen:', error);
                showError();
            } finally {
                hideLoading();
            }
        });
        
        // Event listener para el bot√≥n (alternativo)
        searchBtn?.addEventListener('click', function(e) {
            const target = e.target as HTMLButtonElement;
            if (target?.type === 'submit') return; // Ya lo maneja el form
            form?.dispatchEvent(new Event('submit'));
        });
    });
</script>
